Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        storeNums = set() #initialize an empty set. Sets, unlike arrays cant have dups or indexes.
        for index in nums:  # loop over each index in nums
            if index in storeNums:  # Check if the current number is already in the set
                storeNums.remove(index) #removes it from set if true.
            else:
                storeNums.add(index) #adds it to the set if unique.
            
        for num in storeNums:
            return num  #the only num left in the set should be the unique one.
